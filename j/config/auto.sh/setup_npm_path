# If we have nvm, then use the latest node
# But disabled for now, because this slows down my shell startup
if false && nvm --version >/dev/null
then

	unset PREFIX
	nvm use node

else

	# It is too slow to run nvm for every shell that starts up.

	# Although if we did it during X startup, and the vars were exported to all desktop terminals, that might be good enough.
	# (But beware this might not work smoothly.  I think Fluxbox starts up with sh.  Does nvm work in sh?!  If not, Fluxbox might not start at all!)

	# Our current approach is to not run npm, but use the version of node installed on the system.
	# This version of node will let us run simple/common tools like jsbeautify.
	# When actually working on a Node project, we will need to run nvm to select a more recent version of Node.
	# But actually nvm has trouble with the PREFIX which I like to set.
	# For that reason, we offer functions below for running nvm.
	# Although in fact these do little more than `unset PREFIX` and `unset NODE_PATH`

	# Use the node package manually installed in /usr/local
	#export PATH="/usr/local/node/bin:$PATH"

	# Otherwise there may be a nodejs package installed via dpkg or rpm

	# I like to keep my global packages in "$HOME/npm", to avoid conflicts with ownership in /usr/local/node

	# Assuming you have previously done: npm config set prefix ~/npm
	# BUT THIS IS UNDESIRABLE if you might want to use nvm later, because nvm cannot handle prefix in ~/.npmrc
	#export PATH="$HOME/npm/bin:$PATH"

	# So a friendlier way is to set the PREFIX var.  (Too bad they didn't call this NODE_PREFIX or NPM_PREFIX)
	export PREFIX="$HOME/npm"
	export PATH="$PREFIX/bin:$PATH"

	# The code below assumes that we have nvm installed.

	# Even with this, when I want to do `nvm use` I must first do `unset PREFIX`.

	# Becuase it is slow to run nvm for every shell, we don't run it, but we do this instead:
	#alias node='echo "You may want to run nvmusenode or nvmusesystem first"'
	#alias npm='echo "You may want to run nvmusenode or nvmusesystem first"'
	# This doesn't really work unless it is run twice.  The first time, nvm gets called with PREFIX still set!
	#alias nvmusenode='unset PREFIX ; unalias node ; unalias npm ; nvm use node'
	# Using a function instead of an alias works on the first attempt.
	nvmusenode() {
		#unalias node 2>/dev/null
		#unalias npm 2>/dev/null

		# We could also remove this function, but why not leave it available, in case the user wants to switch to/from?
		# Bash:
		#unset -f nvmusenode
		# Zsh:
		#unfunction nvmusenode

		unset PREFIX
		nvm use node

		# NODE_PATH was being set by nodejs=0.10.37-1chl1~trusty1 in the file /etc/profile.d/nodejs.sh
		# But Yeoman requires it to be set correctly for the current node version.
		#export NODE_PATH="${NVM_PATH}_modules:${NODE_PATH}"
		# Or just not having it set incorrectly is good enough!
		unset NODE_PATH

		nodewhatsup
	}
	# These two don't necessarily use the system node
	# They just use whichever node + npm are currently on the PATH.
	# So if you run `nvm use node` before running one of these, you might be using a different version of node!
	# So `nvm use system` is safer.  Although it won't set PREFIX correctly.  Gah!
	# So the safe thing is: nvm use system ; nvmusesystem
	nvmusesystem() {
		nvm use system
		# Because that will set the prefix to `/usr/local/npm`, which is not where I keep it!
		export PREFIX="$HOME/npm"
		export PATH="$PREFIX/bin:$PATH"
		unset NODE_PATH

		nodewhatsup
	}
	nvmusetempprefix() {
		# Change the npm location, but keep using the same node we were using before.
		# This might be desirable to play around with npm.
		# Beware that the folder may get confused, with different versions.
		export PREFIX="$HOME/tmp/npm"
		export PATH="$PREFIX/bin:$PATH"

		nodewhatsup
	}
	nodewhatsup() {
		echo "nvm current: $(nvm current)"
		echo "PREFIX:    $PREFIX"
		echo "node:      $(which node)"
		echo "npm:       $(which npm)"
		echo "NVM_PATH:  $NVM_PATH"
		echo "NVM_BIN:   $NVM_BIN"
		echo "NODE_PATH: $NODE_PATH"
	}
	nodestatus() {
		nodewhatsup
	}

fi


# Just notes on using nvm, for me:
#
# nvm install 1.2.3 --reinstall-packages-from=default
#
#   will install version 1.2.3 of node, and also install all global packages from your default node version
#
# To do it after an install:
#
#   nvm use iojs; nvm reinstall-packages node, or nvm install iojs --reinstall-packages-from=iojs
#
