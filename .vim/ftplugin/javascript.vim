" Some yum here: http://oli.me.uk/2013/06/29/equipping-vim-for-javascript/
" Recommends syntastic, YouCompleteMe and tern

" This one causes a flash but seems to work :)
iab \f function) {<CR>}<Up><End><Left><Left><Left>
"iab -> function) {ODODOD
" These only trigger with a space before and after them.  =/
"iab ( ()<Left>
"iab { {<CR>}<Up><End>
"iab { {}<Left>
" And then I installed UltiSnips :-P
" and delimitMate
" but still...
inoremap <buffer> {<CR> {<CR><CR>}<Up><Esc>cc

" Grabs the highlighted expression and logs it
vnoremap <Leader>log yoconsole.log("<C-R>":", <C-R>");<Esc>
" viW is *sometimes* preferable, e.g. to catch 'obj.prop[i]' but more often than not it grabs too much, e.g. it catches 'obj.prop[i]);'
nmap <Leader>log viw<Leader>log
nmap <Leader>Log viW<Leader>log



" CheckNotCoffee - If the user opens a Javascript file which was generated
" from Coffeescript, lock the buffer so the user cannot modify it (they should
" find and modify the coffee file instead).

" TODO: We may want to move this to a different file, so it can work with a
" variety of file types / extensions and patterns.

" Similar to the checks in plugin/sws.vim

"" This doesn't work the first time round
"" So we call below, hopefully once per JS buffer.
"" That explicit call might make this trigger redundant!
" autocmd BufReadPost *.js call s:CheckNotCoffee()

function! s:CheckNotCoffee()
  let jsName = expand('%')
  let coffeeName = expand('%<') . ".coffee"
  let firstLine = getline(1)
  "let searchPat = "// Generated by CoffeeScript"
  let searchPat = "// Generated by "
  "let searchPat = '\<[Gg]enerated '      " too general
  "" WARNING: If we make a general match, not a specific match, we really
  "" should NOT set autoread below.
  let matched = match(getline(1), searchPat)
  if matched >= 0
    "echo "Locking buffer because it is *generated* source!"
    setlocal nomodifiable
    " I invariably want this too
    setlocal autoread
  endif
endfunction

call s:CheckNotCoffee()

