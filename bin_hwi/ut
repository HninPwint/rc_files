#!/bin/bash

processToCycle="kicker gkrellm xscreensaver" # xscreensaver for other desktops ^^
processToRenice="xchat xterm zsh"

## This blacklist is stupid.  We need to pause everything owned by the user (or users) except for a few we keep running.

## I really want to pause vim and vi but this spawns a new bug:
##
##   Vims opened from a shell (not vims opened directly in an xterm mind) are
##   suspended, and do not come back cleanly from 'fg' or 'reset' - we are
##   forced to kill or quit them (stdin ':qa' works).
##
##   We lose ... undo history
##   in unhidden buffers, and possibly unsaved changes.
##
## But I still fear sometimes vims in a particular state may impact framerate and even server switch time!
## It may be when FileExplorer or ConqueTerm is open, or other situations ... !

processToPause="vim vi gvim chrome firefox firefox-bin swiftfox-bin iceweasel-bin plugin-container icedove-bin thunderbird-bin konqueror mandelbulber ktorrent amarokapp onchange jwatch maxima wxmaxima skype soffice.bin"
# xmms 

for p in $processToRenice
do myrenice -n 10 "$p" | sh
done

for p in $processToPause
do killall -STOP "$p"
done

for p in $processToCycle
do killall "$p" && eval "cycled_$p=true"
done

sudo killall joeys_amazing_fuck_this_sensors_cpufreq_daemon

demoToWatch="`find "$HOME"/.loki/ut/System/ -name "*.dem" | afterlast / | randomorder | head -n 1`"
if [ "$demoToWatch" ]
then
	echo "Setting up demo: $demoToWatch"
	(
		echo "Playing $demoToWatch"
		# echo "demoplay $demoToWatch?timebased?3rdperson"
		echo "demoplay $demoToWatch?timebased"
	) > "$HOME/.loki/ut/System/playdemo"
fi

totalKfree=`cat /proc/meminfo | egrep "^(MemFree|Cached)" | takecols 2 | awksum`
echo "Total K Free: $totalKfree"
if [ ! "$totalKfree" ] || [ "$totalKfree" -lt 350000 ]
then
	## Clear some memory so UT won't lag during play or server join process.
	## This is counter-constructive if it clears caches containing earlier accessed UT files!
	verbosely dd if=/dev/zero of=/dev/shm/clearing_space_for_ut.tmp bs=$((1024*1024)) count=400
	verbosely rm -f /dev/shm/clearing_space_for_ut.tmp
fi

## Preload the most common FFA map files so I won't lose my spot on mapswitch!
(

sleep 30

precache_file () {
	for FILE
	do
		if nice -n 4 dd if="$FILE" of=/dev/null bs=4800 count=1024 2>/dev/null
		then : # jshinfo "Precached $FILE"
		# else jshwarn "Failed to precache $FILE"
		else echo "Failed to precache $FILE"
		fi
	done
}

shopt -s nocaseglob

(
# CTF-Gataka-SE
cat << !
CTF-IncineratorLE-102
CTF-Revenge-LE102
CTF-AreaN23-LE103
CTF-Orbital-LE103
CTF-Ranel-JoltEdition
CTF-Cynosure][LE105
CTF-Vaultcity-LE102
!
) |

while read MAPNAME
do
	MAPFILE=/usr/local/install/games/ut/Maps/"$MAPNAME".unr
	precache_file "$MAPFILE"
	# echo "Precached $MAPFILE"
	utdep.pl "$MAPFILE"
	:
done |
removeduplicatelines |
while read DEPNAME
do
	## Although we don't really need the trailing * (we have the full
	## filename already), we do need it to make use of nocaseglob!
	precache_file /usr/local/install/games/ut/*/"$DEPNAME"*
	echo "Precached $DEPNAME"
	:
done |
osd_cat

shopt -u nocaseglob

) &

# xrandr -s 1600x1200

## This verified that initial taskset works fine
# (
	# sleep 30
	# verbosely taskset -p `pidof ut-bin`
	# verbosely sudo taskset -p 0x00000001 `pidof ut-bin`
	# verbosely taskset -p `pidof ut-bin`
# ) &

touch /tmp/disable_osd_show   ## For osd_show

xgamma -gamma 2.5



# RandomFork
#
# This is probably dangerous for old systems, and I don't seem to need it.
#
# Flood the CPU for four seconds so that it is running at the currect speed
#
# This may not be needed.  In the end I had to set cpufreq to get the game
# running at the right speed, and to prevent the occasional lockups, I had to
# close all GL apps, including LXDE (switch to Fluxbox).
#
# Another outcome might be that one of the cores is flooed, so UT gets the
# other one?

RandomFork () {
	while [ "$SECONDS" -le "4" ]; do
		
	done
}
# RandomFork &

sudo cpufreq-set -d 2G -u 2G
sleep 1
# Added aoss here but that just made it segfaults rather than give no sound, when xmms has audio device open.
# Taskset sets a mask of which cores to use; only number 2.
taskset -p 0x02 /usr/local/install/games/ut/ut cpufreq=2000 "$@"
sudo cpufreq-set -d 1G -u 2.0G



xgamma -rgamma 1.2 -ggamma 1.6 -bgamma 1.6

rm -f /tmp/disable_osd_show

# xrandr -s 1280x1024

sudo su /root/bin/joeys_amazing_fuck_this_sensors_cpufreq_daemon &

for p in $processToCycle
do
	eval "cyc=\$cycled_$p"
	# If we have been asked to start a process, but we are on X server 1, do it on X server 0 instead.
	# Do this for all apps, not just [ "$p" = kicker ] && 
	if [ "$cyc" = true ]
	then
		if [ "$DISPLAY" = ":1" ]
		then
			verbosely env DISPLAY=:0.0 "$p" &
			if [ "$p" = "kicker" ]
			then verbosely "$p" &
			fi
		else verbosely "$p" &
		fi
	fi
done

for p in $processToPause
do killall -CONT "$p"
done

for p in $processToRenice
do myrenice -n 0 "$p"
done | sudo sh



( sleep 40 ; reset ; echo -n "% " ) &


(
	cd "$HOME"/.loki/ut/System
	for demofile in NEW*.dem
	do mv "$demofile" "`date -r "$demofile" +"%Y%m%d-%H%M"`.dem"
	done
)

